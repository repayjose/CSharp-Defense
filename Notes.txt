Defend from
 -Incorrect entry
   -add user input validation
 -invalid operations
   -check arguments
   -unit test operations
 -system mishaps
   -add checks
   -manage exceptions
 -future developers
   -write clean code
   -unit tests
			

Improve code comprehension
 -single responsibility principle
 -separation of concerns
 -DRY

Defining Unit test cases
 -valid inputs
 -data entry rules
 -edge cases
 -invalid inputs
 -possible exceptions
 -empty and null 

Methods
 -Guard against invalid arguments
 -Return Predicable results
 -Only throw expected exceptions

Guard Statements
- Helper methods
- Generic guard class
- Overloaded methods

Returning Multiple values from method
-ref/out
-object
-tuple

CSQS
-query and command methods
-voids 
	-use exceptions


Appropriate Return types for methods
- Return values for calculations 
	-use exceptions to give caller information
- Return nullable types if ex.message is not needed and value can be null
- Use ref/out if need addtional information and you cannot change method signature
- Return tuple if you need to return multiple values
- Return result class
-Return objects 
	-use exceptions to give caller information
-Return nullable types
-Void
	-use exceptions for additional information to caller
